"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import dj_database_url
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-9&7^@j+ubz&wj(ozeg_&g3v@pfjpio6+*c3hh0i413#lsxy^_e"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = ['127.0.0.1', '.onrender.com'] # Permite o acesso pelo seu domínio Render


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "app_usuario",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "djangologin",  # Nome do DB que você criou
        "USER": "postgres",  # Seu usuário do Postgres
        "PASSWORD": "Dyndns@2024pg",  # Sua senha do Postgres
        "HOST": "localhost",  # Geralmente localhost
        "PORT": "5432",  # Porta padrão do Postgres
    }
}



# Mantenha o seu DATABASES padrão local (SQLite)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# ⚡️ BLOCO CRÍTICO DE PRODUÇÃO ⚡️
# Tenta obter a URL do Render
DATABASE_URL = os.environ.get('DATABASE_URL')

if DATABASE_URL:
    # Se a URL do banco de dados do Render existir, use-a.
    DATABASES['default'] = dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=600
    )
    # E DEFINA DEBUG PARA FALSE AQUI para garantir a segurança em produção
    DEBUG = False 
else:
    # Se DATABASE_URL não estiver definida, DEBUG permanece True (para o desenvolvimento local)
    DEBUG = True


# ⚡️ BLOCO CRÍTICO PARA PRODUÇÃO NO RENDER ⚡️
# Se o DEBUG estiver False (produção) E a DATABASE_URL estiver definida (no Render)
if not DEBUG and os.environ.get('DATABASE_URL'):
    DATABASES['default'] = dj_database_url.config(
        default=os.environ.get('DATABASE_URL'),
        conn_max_age=600  # Tempo de vida máximo da conexão
    )


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Ela diz ao Django para procurar arquivos estáticos dentro da pasta 'static' na raiz do projeto
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# ⚡️ NOVO: Local onde os arquivos estáticos serão coletados para produção ⚡️
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_URL = '/login/'

LOGIN_REDIRECT_URL = '/bem_vindo/' # URL da nossa futura tela de boas-vindas

# ⚡️ NOVO: Onde o Django redireciona após um logout (vamos para a tela de login) ⚡️
LOGOUT_REDIRECT_URL = '/login/'

